1. ackerman.cpp

先觀察那個數學式子的架構
首先是輸入的部分 很明顯這個程式是要輸入兩個數字的
宣告兩個整數x,y來做為函式的輸入，並且使用!cin.eof來重複的執行直到End Of File
依據了作業的要求 讓函式A為計算數值的函式
並用if-else來達成判斷他是否為basecase
如果是的話就return他給的數學式子(n+1)
如果不是的話就讓程式繼續往下跑，並一直呼叫自己的function(有A(m-1,1)跟A(m-1,A(m,n-1)))越來越接近basecase直到輸出為止

2.powerset.cpp

先說主角powerset
先觀察powerset是如何運作的
發現這個方程式會輸出的數量為2^n
計算方式為每一個字串都可以進行選跟不選的動作 所以情況數會是2*2*2...=2^n
觀察完這個方程式後就可以開始設計
使用string(thestring)來作為暫存的方式，函式只要輸出一個字串，就不用二維陣列了，並宣告一個整數i知道目前在幾號的位置
因為不知道實際會有多少字串被輸入，而最多只有10個，所以利用for loop去找到哪一號是空的，就知道幾個字串是被輸入的
並將basecase設計成等到選擇完畢後就輸出該次決定的字，所以把條件設成 選到第幾個==字串的數量(i==numberofstring)就知道選擇完畢了沒並輸出
而要recursion的情況就是要往下一個選擇走，一條是要選這次的powerset(a,i+1,thestring+a[i])，另一條是不選這次的繼續往前面走powerset(a,i+1,thestring)
持續選與不選直到選完


*示意圖
		--(選)(選)
	--(選)
		--(選)(不選)
開始                          ......
		--(不選)(選)
	--(不選)
		--(不選)(不選)

利用這種方式來實現powerset的recursion

再回頭來講輸入的部分
先自己設想輸入的字如 aaaaa bbbbbbbb cc ddddddd eeee
裡面的space就是換下一組的意思，然後按enter執行
利用 輸入enter char-'0'會等於-38 輸入space char-'0'會等於-16來判斷有沒有輸入space以及enter
再來是資料存放的方式，既然是要存數組有限的字串，就會想到利用char的二維陣列來存
因為最多會存到10*10 所以宣告10*10大小的二維陣列
利用while迴圈使用cin.get ，這樣才能比較方便存到cin.get
輸入時一遇到space就換一列把列數++把行數清空，而輸入一遇到enter代表輸入結束了，就break出這個while
輸入資料存好後就把二維陣列傳入powerset裡面，並把號碼清空成0以及字串清空成""
等powerset輸出完之後利用條件式看看是不是EndOfFile了，還沒的話就利用goto到一開始的位置繼續執行下去



